github 주소 : https://github.com/dldhk97/DataStructure-TeamProject/

정렬 프로그램의 프로젝트 명은 Sorting Alogorithms입니다.

* github에 포함되어있는 RandomDataCreator는 랜덤한 값을 생성하는 생성기입니다.
  마찬가지로 TextComparer는 두 텍스트를 비교하거나, 텍스트 파일들끼리 비교하는 프로그램입니다.
  테스트 데이터를 생성하기 위해서, 결과값을 비교하기 위한 프로젝트이므로 본 정렬 프로그램에 끼치는 영향은 없습니다.

* 이 프로그램은 시작 시 프로젝트 최상단 디렉토리에 있는 텍스트파일(데이터)을 읽어들입니다.
  (프로젝트 최상단 디렉토리는 main.cpp, 각종 헤더가 있는 디렉토리를 말합니다.)

* 혹시 기본 경로가 적용되지 않아 파일을 읽을 수 없는 경우에는 '상대 경로 사용할 경우'를 주석처리 하고
  '절대 경로 사용할 경우'를 주석 해제하여 경로를 정해주시면 됩니다.
   절대 경로 사용 시 마지막에는 \\를 붙여주셔야 합니다.
   ex) C:\\Users\\Administrator\\Desktop\\

* 입력데이터는 '자료형 - 데이터수.txt'로 구성됩니다.
  ex) int - 1000.txt, rectangle - 50000.txt, string - 100000.txt

* main문 최상단의 DATASIZE에 읽을 데이터수를 지정합니다.
  이 프로그램은 한번에 정렬하는 데이터 수를 지정하면, 각 자료형에 대해 정렬을 수행합니다.
  예를들면, DATASIZE를 1000으로 하면 int - 1000.txt와 double - 1000.txt와 string - 1000.txt와 rectangle - 1000.txt를 읽고 정렬을 수행합니다.
  
  따라서 1000, 5000, 10000, 50000, 100000를 모두 정렬하기 위해서는 1000을 수행하고, 프로그램을 재시작한 뒤 5000을 실행하고, 10000을 실행해야합니다.
  또, 결과값들은 모두 이름이 중복되므로 덮어씌워집니다. 만약 이전 정렬 결과값들과 수행시간을 보존하려면 따로 백업을 해 두어야 합니다.

* 정렬된 데이터는 _sorts..정렬이름(자료형)_sorted.txt 형태로 저장이 됩니다.
  예를들면, 버블정렬을 int형으로 정렬한 결과를 _sorts..bubbleSort(intArr)_sorted.txt에 저장합니다.
  (이 정렬 결과값은 정말로 정렬이 되어있는지 검증하기 위해 텍스트 파일로 따로 분리한 것입니다.)

* 각 정렬을 수행하고 나면 수행 시간을 __result.txt에 표기합니다.
  저희는 이 수행시간들을 종합하여 레포트를 작성하였습니다.